name: 自动部署Nezha

on:
  workflow_dispatch: # 只允许手动触发
    inputs:
      environment:
        description: "选择部署环境"
        required: true
        default: "production"
        type: choice
        options:
          - staging
          - production
      region:
        description: "选择部署区域"
        required: true
        default: "AWS-JP(Tokyo)"
        type: choice
        options:
          #  免费区域
          - SG(free) # azure新加披
          - US(free) # aws美国
          # AWS 区域
          - AWS-AU(Sydney)
          - AWS-BR(São Paulo)
          - AWS-KR(Seoul)
          - AWS-CA(Montreal)
          - AWS-US(VA)
          - AWS-US(OR)
          - AWS-EU(Frankfurt)
          - AWS-JP(Tokyo)
          - AWS-SG(Singapore)
          # GCP 区域
          - GCP-AU(Sydney)
          - GCP-BR(São Paulo)
          - GCP-US(IA)
          - GCP-EU(Frankfurt)
          - GCP-JP(Osaka)
          - GCP-JP(Tokyo)
          - GCP-IL(Tel Aviv)
          - GCP-IN(Mumbai)
          - GCP-KSA(Dammam)
          # Azure 区域
          - Azure-AU(Sydney)
          - Azure-BR(São Paulo)
          - Azure-CA(Montreal)
          - Azure-US(VA)
          - Azure-US(WA)
          - Azure-EU(Netherlands)
          - Azure-JP(Tokyo)
          - Azure-SG(Singapore)
          # SAP Neo 区域
          - Neo-UAE(Dubai)
          - Neo-KSA(Riyadh)
      # ------------------- 新增：镜像名称输入 -------------------
      DOCKER_IMAGE:
        description: "Docker 镜像地址 (可从 GitHub Releases 复制)"
        required: true
        default: "镜像"
        type: string
      # ------------------- 原有的应用名称输入 -------------------
      app_name:
        description: "应用名称（可选，留空则自动生成）"
        required: false
        default: ""
        type: string

env:
  MEMORY: 512M

jobs:
  deploy-app:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install CF CLI
        run: |
          wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
          echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
          sudo apt-get update
          sudo apt-get install -y cf8-cli

      - name: Determine CF API endpoint and app name
        run: |
          # 设置API端点和生成随机字符串
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)

          case "${{ github.event.inputs.region }}" in
            # 免费区域
            "SG(free)")
              echo "CF_API=https://api.cf.ap21.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-freesg$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "US(free)")
              echo "CF_API=https://api.cf.us10-001.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-freeus$RANDOM_STR" >> $GITHUB_ENV
              ;;
            # AWS 区域
            "AWS-AU(Sydney)")
              echo "CF_API=https://api.cf.ap10.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-awsau$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "AWS-BR(São Paulo)")
              echo "CF_API=https://api.cf.br10.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-awsbr$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "AWS-KR(Seoul)")
              echo "CF_API=https://api.cf.ap12.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-awskr$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "AWS-CA(Montreal)")
              echo "CF_API=https://api.cf.ca10.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-awsca$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "AWS-US(VA)")
              echo "CF_API=https://api.cf.us10-001.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-awsusva$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "AWS-US(OR)")
              echo "CF_API=https://api.cf.us11.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-awsusor$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "AWS-EU(Frankfurt)")
              echo "CF_API=https://api.cf.eu10-005.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-waseu$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "AWS-JP(Tokyo)")
              echo "CF_API=https://api.cf.jp10.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-awsjp$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "AWS-SG(Singapore)")
              echo "CF_API=https://api.cf.ap11.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-awssg$RANDOM_STR" >> $GITHUB_ENV
              ;;
            
            # GCP 区域
            "GCP-AU(Sydney)")
              echo "CF_API=https://api.cf.ap30.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-gcpau$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "GCP-BR(São Paulo)")
              echo "CF_API=https://api.cf.br30.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-gcpbr$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "GCP-US(IA)")
              echo "CF_API=https://api.cf.us30.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-gcpus$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "GCP-EU(Frankfurt)")
              echo "CF_API=https://api.cf.eu30.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-gcpeu$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "GCP-JP(Osaka)")
              echo "CF_API=https://api.cf.jp30.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-gcpjpo$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "GCP-JP(Tokyo)")
              echo "CF_API=https://api.cf.jp31.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-gcpjpt$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "GCP-IL(Tel Aviv)")
              echo "CF_API=https://api.cf.il30.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-gcpil$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "GCP-IN(Mumbai)")
              echo "CF_API=https://api.cf.in30.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-gcpin$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "GCP-KSA(Dammam)")
              echo "CF_API=https://api.cf.sa31.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-gcpsa$RANDOM_STR" >> $GITHUB_ENV
              ;;
            
            # Azure 区域
            "Azure-AU(Sydney)")
              echo "CF_API=https://api.cf.ap20.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-azau$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "Azure-BR(São Paulo)")
              echo "CF_API=https://api.cf.br20.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-azbr$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "Azure-CA(Montreal)")
              echo "CF_API=https://api.cf.ca20.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-azca$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "Azure-US(VA)")
              echo "CF_API=https://api.cf.us21.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-azva$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "Azure-US(WA)")
              echo "CF_API=https://api.cf.us20.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-azwa$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "Azure-EU(Netherlands)")
              echo "CF_API=https://api.cf.eu20-001.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-azeu$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "Azure-JP(Tokyo)")
              echo "CF_API=https://api.cf.jp20.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-azjp$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "Azure-SG(Singapore)")
              echo "CF_API=https://api.cf.ap21.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-azsg$RANDOM_STR" >> $GITHUB_ENV
              ;;
            
            # SAP Neo 区域
            "Neo-UAE(Dubai)")
              echo "CF_API=https://api.cf.neo-ae1.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-neouae$RANDOM_STR" >> $GITHUB_ENV
              ;;
            "Neo-KSA(Riyadh)")
              echo "CF_API=https://api.cf.neo-sa1.hana.ondemand.com" >> $GITHUB_ENV
              echo "APP_NAME=nezha-neoksa$RANDOM_STR" >> $GITHUB_ENV
              ;;
          esac

          # 如果用户提供了应用名称，则使用用户提供的
          if [ -n "${{ github.event.inputs.app_name }}" ]; then
            echo "APP_NAME=${{ github.event.inputs.app_name }}" >> $GITHUB_ENV
          fi

          echo "使用API端点: $CF_API"
          echo "应用名称: $APP_NAME"
          echo "部署类型: $DOCKER_IMAGE"

      - name: Login to Cloud Foundry
        run: |
          cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}"

          # 获取组织列表
          ORG=$(cf orgs | sed -n '4p')
          echo "Selected org: $ORG"
          echo "ORG=$ORG" >> $GITHUB_ENV

          # 获取空间列表
          SPACE=$(cf spaces | sed -n '4p')
          echo "Selected space: $SPACE"
          echo "SPACE=$SPACE" >> $GITHUB_ENV

          # 使用获取的组织和空间重新登录
          cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}" -o "$ORG" -s "$SPACE"

      - name: Deploy Application (No Start)
        run: |

          if cf push ${{ env.APP_NAME }} --docker-image ${{ github.event.inputs.DOCKER_IMAGE }} -m ${{ env.MEMORY }} --no-start; then
            echo "Deployment successful"
          else
            cf delete ${{ env.APP_NAME }} -f  
            echo "伙计,部署失败（部署镜像阶段），已清理失败部署残留"
            exit 1
          fi

      - name: Set Environment Variables
        run: |
          # ------------------- 必填变量 --------------------
          cf set-env ${{ env.APP_NAME }} GH_USER "${{ secrets.GH_USER }}"
          cf set-env ${{ env.APP_NAME }} GH_CLIENTID "${{ secrets.GH_CLIENTID }}"
          cf set-env ${{ env.APP_NAME }} GH_CLIENTSECRET "${{ secrets.GH_CLIENTSECRET }}"

          # ------------------- 备份变量 --------------------
          cf set-env ${{ env.APP_NAME }} GH_BACKUP_USER "${{ secrets.GH_BACKUP_USER }}"
          cf set-env ${{ env.APP_NAME }} GH_REPO "${{ secrets.GH_REPO }}"
          cf set-env ${{ env.APP_NAME }} GH_EMAIL "${{ secrets.GH_EMAIL }}"
          cf set-env ${{ env.APP_NAME }} GH_PAT "${{ secrets.GH_PAT }}"

          # ------------------- Argo 变量 --------------------
          cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH }}"
          cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN }}"
          cf set-env ${{ env.APP_NAME }} REVERSE_PROXY_MODE "${{ secrets.REVERSE_PROXY_MODE }}" 

          # ------------------- 可选变量 --------------------
          cf set-env ${{ env.APP_NAME }} NO_AUTO_RENEW "${{ secrets.NO_AUTO_RENEW }}"
          cf set-env ${{ env.APP_NAME }} DASHBOARD_VERSION "${{ secrets.DASHBOARD_VERSION }}"
          cf set-env ${{ env.APP_NAME }} AGENT_VERSION "${{ secrets.AGENT_VERSION }}"
          cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID }}"
          cf set-env ${{ env.APP_NAME }} BACKUP_TIME "${{ secrets.BACKUP_TIME }}"
          cf set-env ${{ env.APP_NAME }} BACKUP_NUM "${{ secrets.BACKUP_NUM }}"

          # 可选：从文件读取环境变量(如果存在)
          if [ -f .env ]; then
            while IFS= read -r line; do
              if [[ ! "$line" =~ ^# ]] && [[ -n "$line" ]]; then
                IFS='=' read -r key value <<< "$line"
                cf set-env ${{ env.APP_NAME }} "$key" "$value"
              fi
            done < .env
          fi

      - name: Start and Verify Application
        run: |
          # 确保目标已设置
          cf target -o ${{ env.ORG }} -s ${{ env.SPACE }}

          # 修复：设置 CF_STARTUP_TIMEOUT 环境变量为 5 分钟 (300秒)，解决启动慢导致失败
          export CF_STARTUP_TIMEOUT=5 
          echo "正在启动应用（所有环境变量已设置，超时时间为5分钟）..."


          if cf start ${{ env.APP_NAME }}; then
            echo "应用启动成功并通过健康检查。"
          else
            echo "应用启动失败。正在获取日志并清理资源..."
            echo "------------------------------------"
            echo "${{ env.APP_NAME }} 的最近日志:"
            echo "------------------------------------"
            cf logs ${{ env.APP_NAME }} --recent # 打印最近的应用日志
            echo "------------------------------------"
            cf delete ${{ env.APP_NAME }} -f # 清理失败部署残留
            echo "伙计,启动失败，已清理失败部署残留"
            exit 1
          fi

      - name: Verify deployment
        run: |
          cf app ${{ env.APP_NAME }}
          echo "部署成功完成!"

      - name: 详细部署信息
        run: |
          echo "🚀 部署完成！详细信息如下："
          echo "区域(Region): ${{ github.event.inputs.region }}"
          echo "组织(ORG): ${{ env.ORG }}"
          echo "空间(SPACE): ${{ env.SPACE }}"
          echo "应用名称(App Name): ${{ env.APP_NAME }}"

          # 获取应用路由
          ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
          if [ -n "$ROUTE" ]; then
            echo "应用 URL (APP_URL): https://$ROUTE"
          else
            echo "⚠️ 未找到应用路由，请检查部署状态。"
          fi
